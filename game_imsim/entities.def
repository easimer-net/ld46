include 'box2d/box2d.h'

alias b2Fixture;
alias b2Body;

interface Collision_Handler {
    member_function 'virtual void BeginContact(b2Contact* contact, Entity_ID me, Entity_ID other) = 0';
    member_function 'virtual void EndContact(b2Contact* contact, Entity_ID me, Entity_ID other) = 0';
}

table Entity {
#memory_only
    bUsed: bool;

    position: vec4;
    size: vec4;
    flRotation: float;
    bHasCollider: bool;

#memory_only
#reset
    hSprite : Shared_Sprite;
}

table Phys_Static {
#not_owning
    body: *b2Body;
#not_owning
    fixture: *b2Fixture;
}

table Phys_Dynamic {
    density : float;
    friction : float;

#not_owning
    body: *b2Body;
#not_owning
    fixture: *b2Fixture;
}

table Living living {
    flHealth: float;
    flMaxHealth: float;
}

%'Used to make things disappear after some time.'
#memory_only
table Expiring expiring {
    flTimeLeft: float;
}

#needs_reference_to_game_data
#implements_interface(Collision_Handler)
table Player {
    mana : float;
    attackCooldown : float;
    bKeys : bool[3];
    vLookDir : vec4;
#memory_only
    bMidAir : bool;

    member_function 'void BeginContact(b2Contact* contact, Entity_ID me, Entity_ID other) override';
    member_function 'void EndContact(b2Contact* contact, Entity_ID me, Entity_ID other) override';
}

%'Non-animated decoration'
table Static_Prop {
    pszSpritePath: char[128];
}

table Player_Spawn {
}

table Key {
    eType : int;
}

table Closed_Door {
    %'Index of the key type that opens this door'
    eKeyRequired : int;
}

table Open_Door {
}

#needs_reference_to_game_data
#implements_interface(Collision_Handler)
#memory_only
table Knife_Projectile {
    member_function 'void BeginContact(b2Contact* contact, Entity_ID me, Entity_ID other) override';
    member_function 'void EndContact(b2Contact* contact, Entity_ID me, Entity_ID other) override';
}
